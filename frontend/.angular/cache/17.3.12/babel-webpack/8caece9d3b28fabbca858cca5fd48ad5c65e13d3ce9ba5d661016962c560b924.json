{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ActivityService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/activities';\n  }\n  submitActivity(activityData) {\n    return this.http.post(this.apiUrl, activityData).pipe(catchError(this.handleError));\n  }\n  getMyActivities() {\n    return this.http.get(this.apiUrl).pipe(catchError(this.handleError));\n  }\n  getPendingActivities() {\n    return this.http.get(`${this.apiUrl}/pending`).pipe(catchError(this.handleError));\n  }\n  reviewActivity(id, reviewData) {\n    return this.http.put(`${this.apiUrl}/${id}/review`, reviewData).pipe(catchError(this.handleError));\n  }\n  getAllActivities() {\n    return this.http.get(`${this.apiUrl}/all`).pipe(catchError(this.handleError));\n  }\n  generateReport(params = {}) {\n    const queryParams = new URLSearchParams();\n    if (params.department) queryParams.append('department', params.department);\n    if (params.semester) queryParams.append('semester', params.semester);\n    if (params.status) queryParams.append('status', params.status);\n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get(url);\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Error Code: ${error.status}, Message: ${error.message}`;\n      }\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function ActivityService_Factory(t) {\n      return new (t || ActivityService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ActivityService,\n      factory: ActivityService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","ActivityService","constructor","http","apiUrl","submitActivity","activityData","post","pipe","handleError","getMyActivities","get","getPendingActivities","reviewActivity","id","reviewData","put","getAllActivities","generateReport","params","queryParams","URLSearchParams","department","append","semester","status","url","toString","error","errorMessage","ErrorEvent","message","console","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\services\\activity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Activity } from '../models/activity.model';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n// Define the API response interfaces\r\ninterface ApiResponse<T> {\r\n  success: boolean;\r\n  count?: number;\r\n  data: T;\r\n  message?: string;\r\n}\r\n\r\ninterface PendingActivitiesResponse {\r\n  success: boolean;\r\n  count: number;\r\n  stats: {\r\n    pending: number;\r\n    approved: number;\r\n    rejected: number;\r\n  };\r\n  data: Activity[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityService {\r\n  private apiUrl = 'http://localhost:5000/api/activities';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  submitActivity(activityData: FormData): Observable<ApiResponse<Activity>> {\r\n    return this.http.post<ApiResponse<Activity>>(this.apiUrl, activityData)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getMyActivities(): Observable<ApiResponse<Activity[]>> {\r\n    return this.http.get<ApiResponse<Activity[]>>(this.apiUrl)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getPendingActivities(): Observable<PendingActivitiesResponse> {\r\n    return this.http.get<PendingActivitiesResponse>(`${this.apiUrl}/pending`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  reviewActivity(id: string, reviewData: { status: 'approved' | 'rejected', feedback?: string, pointsAwarded?: number }): Observable<ApiResponse<Activity>> {\r\n    return this.http.put<ApiResponse<Activity>>(`${this.apiUrl}/${id}/review`, reviewData)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getAllActivities(): Observable<ApiResponse<Activity[]>> {\r\n    return this.http.get<ApiResponse<Activity[]>>(`${this.apiUrl}/all`)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  generateReport(params: { department?: string; semester?: string; status?: string } = {}): Observable<any> {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    if (params.department) queryParams.append('department', params.department);\r\n    if (params.semester) queryParams.append('semester', params.semester);\r\n    if (params.status) queryParams.append('status', params.status);\r\n    \r\n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\r\n    return this.http.get<any>(url);\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred';\r\n    \r\n    if (error.error instanceof ErrorEvent) {\r\n      // Client-side error\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      // Server-side error\r\n      if (error.error && error.error.message) {\r\n        errorMessage = error.error.message;\r\n      } else {\r\n        errorMessage = `Error Code: ${error.status}, Message: ${error.message}`;\r\n      }\r\n    }\r\n    \r\n    console.error(errorMessage);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { NavbarComponent } from '@app/ui/navbar/navbar.component';\nlet ActivitySubmitComponent = class ActivitySubmitComponent {\n  constructor(fb, authService, activityService, router, http) {\n    this.fb = fb;\n    this.authService = authService;\n    this.activityService = activityService;\n    this.router = router;\n    this.http = http;\n    this.currentUser = null;\n    this.isLoading = false;\n    this.isSubmitting = false;\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.selectedFile = null;\n    this.calculatedPoints = 0;\n    this.activityTypes = ['sports', 'mooc', 'workshops', 'internships'];\n    this.levels = [1, 2, 3, 4, 5];\n    this.semesters = [1, 2, 3, 4, 5, 6, 7, 8];\n    this.sportsPointsMap = {\n      1: 8,\n      2: 15,\n      3: 25,\n      4: 40,\n      5: 50\n    };\n    this.initializeForm();\n  }\n  initializeForm() {\n    this.activityForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      activityType: ['', Validators.required],\n      description: ['', [Validators.required, Validators.minLength(10)]],\n      eventOrganizer: ['', [Validators.required, Validators.minLength(3)]],\n      date: ['', Validators.required],\n      level: [null],\n      points: [0],\n      semester: ['', [Validators.required, Validators.min(1), Validators.max(8)]]\n    });\n    // Calculate points when activity type or level changes\n    this.activityForm.get('activityType')?.valueChanges.subscribe(() => {\n      this.calculatePoints();\n      this.updateLevelValidation();\n    });\n    this.activityForm.get('level')?.valueChanges.subscribe(() => {\n      this.calculatePoints();\n    });\n    // Mark form as touched when any field changes\n    Object.keys(this.activityForm.controls).forEach(key => {\n      this.activityForm.get(key)?.valueChanges.subscribe(() => {\n        this.activityForm.get(key)?.markAsTouched();\n      });\n    });\n  }\n  ngOnInit() {\n    this.currentUser = this.authService.getCurrentUser();\n    if (!this.currentUser) {\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n  }\n  updateLevelValidation() {\n    const activityType = this.activityForm.get('activityType')?.value;\n    const levelControl = this.activityForm.get('level');\n    if (activityType === 'sports') {\n      levelControl?.setValidators([Validators.required]);\n    } else {\n      levelControl?.clearValidators();\n      levelControl?.setValue(null);\n    }\n    levelControl?.updateValueAndValidity();\n  }\n  calculatePoints() {\n    const activityType = this.activityForm.get('activityType')?.value;\n    const level = Number(this.activityForm.get('level')?.value);\n    if (!activityType) {\n      this.calculatedPoints = 0;\n      return;\n    }\n    switch (activityType) {\n      case 'sports':\n        this.calculatedPoints = this.sportsPointsMap[level] || 0;\n        break;\n      case 'mooc':\n        this.calculatedPoints = 50;\n        break;\n      case 'workshops':\n        this.calculatedPoints = 6;\n        break;\n      case 'internships':\n        this.calculatedPoints = 20;\n        break;\n      default:\n        this.calculatedPoints = 0;\n    }\n    this.activityForm.patchValue({\n      points: this.calculatedPoints\n    });\n  }\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      // Check file size (5MB limit)\n      if (file.size > 5 * 1024 * 1024) {\n        this.errorMessage = 'File size exceeds 5MB limit';\n        event.target.value = '';\n        this.selectedFile = null;\n        return;\n      }\n      // Check file type\n      const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        this.errorMessage = 'Invalid file type. Please upload PDF, JPG, JPEG, or PNG files only';\n        event.target.value = '';\n        this.selectedFile = null;\n        return;\n      }\n      this.selectedFile = file;\n      this.errorMessage = '';\n    }\n  }\n  onSubmit() {\n    // Mark all fields as touched to trigger validation\n    Object.keys(this.activityForm.controls).forEach(key => {\n      this.activityForm.get(key)?.markAsTouched();\n    });\n    // Log form state for debugging\n    console.log('Form state:', {\n      valid: this.activityForm.valid,\n      values: this.activityForm.value,\n      errors: this.activityForm.errors,\n      selectedFile: this.selectedFile,\n      calculatedPoints: this.calculatedPoints,\n      currentUser: this.currentUser ? {\n        id: this.currentUser._id,\n        name: this.currentUser.name\n      } : null\n    });\n    if (!this.currentUser) {\n      console.error('No user logged in');\n      this.errorMessage = 'Please login to submit an activity.';\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n    if (!this.selectedFile) {\n      console.error('No file selected');\n      this.errorMessage = 'Please upload a certificate.';\n      return;\n    }\n    if (this.activityForm.invalid) {\n      console.error('Form validation failed:', this.activityForm.errors);\n      this.errorMessage = 'Please fill in all required fields correctly.';\n      return;\n    }\n    this.isSubmitting = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n    try {\n      const formData = new FormData();\n      const formValues = this.activityForm.value;\n      // Log the data being sent\n      console.log('Preparing to send data:', {\n        title: formValues.title,\n        activityType: formValues.activityType,\n        description: formValues.description,\n        eventOrganizer: formValues.eventOrganizer,\n        date: formValues.date,\n        semester: formValues.semester,\n        points: this.calculatedPoints,\n        level: formValues.level,\n        studentId: this.currentUser._id,\n        fileSize: this.selectedFile.size,\n        fileType: this.selectedFile.type\n      });\n      // Add the certificate file\n      formData.append('certificateFile', this.selectedFile);\n      // Add basic activity details\n      formData.append('title', formValues.title);\n      formData.append('activityType', formValues.activityType);\n      formData.append('description', formValues.description);\n      formData.append('eventOrganizer', formValues.eventOrganizer);\n      formData.append('date', formValues.date);\n      formData.append('semester', formValues.semester.toString());\n      formData.append('points', this.calculatedPoints.toString());\n      // Add level for sports activities\n      if (formValues.activityType === 'sports' && formValues.level) {\n        formData.append('level', formValues.level.toString());\n      }\n      // Add student details\n      formData.append('studentId', this.currentUser._id);\n      formData.append('studentName', this.currentUser.name);\n      formData.append('studentDepartment', this.currentUser.department || '');\n      formData.append('studentClass', this.currentUser.class || '');\n      formData.append('studentSemester', (this.currentUser.semester || '').toString());\n      formData.append('studentRollNumber', this.currentUser.rollNumber || '');\n      console.log('Submitting activity...');\n      this.activityService.submitActivity(formData).subscribe({\n        next: response => {\n          console.log('Submission successful:', response);\n          this.isSubmitting = false;\n          this.successMessage = 'Activity submitted successfully!';\n          // Reset form\n          this.activityForm.reset();\n          this.selectedFile = null;\n          const fileInput = document.getElementById('certificateFile');\n          if (fileInput) {\n            fileInput.value = '';\n          }\n          setTimeout(() => {\n            this.router.navigate(['/dashboard/student']);\n          }, 2000);\n        },\n        error: error => {\n          console.error('Submit error details:', {\n            message: error.message,\n            error: error\n          });\n          this.isSubmitting = false;\n          // Handle specific error cases\n          if (error.message.includes('Session expired')) {\n            this.errorMessage = 'Your session has expired. Please login again.';\n            this.router.navigate(['/auth/login']);\n            return;\n          }\n          if (error.message.includes('File size exceeds')) {\n            this.errorMessage = 'The file is too large. Please upload a file smaller than 5MB.';\n            return;\n          }\n          if (error.message.includes('Invalid form data')) {\n            this.errorMessage = 'Please check all your inputs and try again.';\n            return;\n          }\n          this.errorMessage = error.message || 'Failed to submit activity. Please try again.';\n        }\n      });\n    } catch (error) {\n      console.error('Error preparing form data:', error);\n      this.isSubmitting = false;\n      this.errorMessage = 'An error occurred while preparing your submission.';\n    }\n  }\n};\nActivitySubmitComponent = __decorate([Component({\n  selector: 'app-activity-submit',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, RouterLink, NavbarComponent],\n  templateUrl: './activity-submit.component.html',\n  styleUrls: ['./activity-submit.component.scss']\n})], ActivitySubmitComponent);\nexport { ActivitySubmitComponent };","map":{"version":3,"names":["Component","CommonModule","Validators","ReactiveFormsModule","RouterLink","NavbarComponent","ActivitySubmitComponent","constructor","fb","authService","activityService","router","http","currentUser","isLoading","isSubmitting","errorMessage","successMessage","selectedFile","calculatedPoints","activityTypes","levels","semesters","sportsPointsMap","initializeForm","activityForm","group","title","required","minLength","activityType","description","eventOrganizer","date","level","points","semester","min","max","get","valueChanges","subscribe","calculatePoints","updateLevelValidation","Object","keys","controls","forEach","key","markAsTouched","ngOnInit","getCurrentUser","navigate","value","levelControl","setValidators","clearValidators","setValue","updateValueAndValidity","Number","patchValue","onFileSelected","event","file","target","files","size","allowedTypes","includes","type","onSubmit","console","log","valid","values","errors","id","_id","name","error","invalid","formData","FormData","formValues","studentId","fileSize","fileType","append","toString","department","class","rollNumber","submitActivity","next","response","reset","fileInput","document","getElementById","setTimeout","message","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\features\\activities\\activity-submit\\activity-submit.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { NavbarComponent } from '@app/ui/navbar/navbar.component';\nimport { ActivityService } from '@app/core/services/activity.service';\nimport { AuthService } from '@app/core/services/auth.service';\nimport { User } from '@app/core/models/user.model';\nimport type { ApiResponse } from '@app/core/models/api-response.model';\nimport type { Activity } from '@app/core/models/activity.model';\n\n@Component({\n  selector: 'app-activity-submit',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, RouterLink, NavbarComponent],\n  templateUrl: './activity-submit.component.html',\n  styleUrls: ['./activity-submit.component.scss']\n})\nexport class ActivitySubmitComponent implements OnInit {\n  activityForm!: FormGroup;\n  currentUser: User | null = null;\n  isLoading = false;\n  isSubmitting = false;\n  errorMessage = '';\n  successMessage = '';\n  selectedFile: File | null = null;\n  calculatedPoints = 0;\n  \n  activityTypes = ['sports', 'mooc', 'workshops', 'internships'] as const;\n  levels = [1, 2, 3, 4, 5];\n  semesters = [1, 2, 3, 4, 5, 6, 7, 8];\n\n  private sportsPointsMap: Record<number, number> = {\n    1: 8,\n    2: 15,\n    3: 25,\n    4: 40,\n    5: 50\n  };\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private activityService: ActivityService,\n    private router: Router,\n    private http: HttpClient\n  ) {\n    this.initializeForm();\n  }\n\n  private initializeForm(): void {\n    this.activityForm = this.fb.group({\n      title: ['', [Validators.required, Validators.minLength(3)]],\n      activityType: ['', Validators.required],\n      description: ['', [Validators.required, Validators.minLength(10)]],\n      eventOrganizer: ['', [Validators.required, Validators.minLength(3)]],\n      date: ['', Validators.required],\n      level: [null],\n      points: [0],\n      semester: ['', [Validators.required, Validators.min(1), Validators.max(8)]]\n    });\n\n    // Calculate points when activity type or level changes\n    this.activityForm.get('activityType')?.valueChanges.subscribe(() => {\n      this.calculatePoints();\n      this.updateLevelValidation();\n    });\n\n    this.activityForm.get('level')?.valueChanges.subscribe(() => {\n      this.calculatePoints();\n    });\n\n    // Mark form as touched when any field changes\n    Object.keys(this.activityForm.controls).forEach(key => {\n      this.activityForm.get(key)?.valueChanges.subscribe(() => {\n        this.activityForm.get(key)?.markAsTouched();\n      });\n    });\n  }\n\n  ngOnInit(): void {\n    this.currentUser = this.authService.getCurrentUser();\n    if (!this.currentUser) {\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n  }\n\n  updateLevelValidation(): void {\n    const activityType = this.activityForm.get('activityType')?.value;\n    const levelControl = this.activityForm.get('level');\n\n    if (activityType === 'sports') {\n      levelControl?.setValidators([Validators.required]);\n    } else {\n      levelControl?.clearValidators();\n      levelControl?.setValue(null);\n    }\n    levelControl?.updateValueAndValidity();\n  }\n\n  calculatePoints(): void {\n    const activityType = this.activityForm.get('activityType')?.value;\n    const level = Number(this.activityForm.get('level')?.value);\n\n    if (!activityType) {\n      this.calculatedPoints = 0;\n      return;\n    }\n\n    switch (activityType) {\n      case 'sports':\n        this.calculatedPoints = this.sportsPointsMap[level] || 0;\n        break;\n      case 'mooc':\n        this.calculatedPoints = 50;\n        break;\n      case 'workshops':\n        this.calculatedPoints = 6;\n        break;\n      case 'internships':\n        this.calculatedPoints = 20;\n        break;\n      default:\n        this.calculatedPoints = 0;\n    }\n    \n    this.activityForm.patchValue({ points: this.calculatedPoints });\n  }\n\n  onFileSelected(event: any): void {\n    const file = event.target.files[0];\n    if (file) {\n      // Check file size (5MB limit)\n      if (file.size > 5 * 1024 * 1024) {\n        this.errorMessage = 'File size exceeds 5MB limit';\n        event.target.value = '';\n        this.selectedFile = null;\n        return;\n      }\n\n      // Check file type\n      const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        this.errorMessage = 'Invalid file type. Please upload PDF, JPG, JPEG, or PNG files only';\n        event.target.value = '';\n        this.selectedFile = null;\n        return;\n      }\n\n      this.selectedFile = file;\n      this.errorMessage = '';\n    }\n  }\n\n  onSubmit(): void {\n    // Mark all fields as touched to trigger validation\n    Object.keys(this.activityForm.controls).forEach(key => {\n      this.activityForm.get(key)?.markAsTouched();\n    });\n\n    // Log form state for debugging\n    console.log('Form state:', {\n      valid: this.activityForm.valid,\n      values: this.activityForm.value,\n      errors: this.activityForm.errors,\n      selectedFile: this.selectedFile,\n      calculatedPoints: this.calculatedPoints,\n      currentUser: this.currentUser ? {\n        id: this.currentUser._id,\n        name: this.currentUser.name\n      } : null\n    });\n\n    if (!this.currentUser) {\n      console.error('No user logged in');\n      this.errorMessage = 'Please login to submit an activity.';\n      this.router.navigate(['/auth/login']);\n      return;\n    }\n\n    if (!this.selectedFile) {\n      console.error('No file selected');\n      this.errorMessage = 'Please upload a certificate.';\n      return;\n    }\n\n    if (this.activityForm.invalid) {\n      console.error('Form validation failed:', this.activityForm.errors);\n      this.errorMessage = 'Please fill in all required fields correctly.';\n      return;\n    }\n\n    this.isSubmitting = true;\n    this.errorMessage = '';\n    this.successMessage = '';\n\n    try {\n      const formData = new FormData();\n      const formValues = this.activityForm.value;\n      \n      // Log the data being sent\n      console.log('Preparing to send data:', {\n        title: formValues.title,\n        activityType: formValues.activityType,\n        description: formValues.description,\n        eventOrganizer: formValues.eventOrganizer,\n        date: formValues.date,\n        semester: formValues.semester,\n        points: this.calculatedPoints,\n        level: formValues.level,\n        studentId: this.currentUser._id,\n        fileSize: this.selectedFile.size,\n        fileType: this.selectedFile.type\n      });\n      \n      // Add the certificate file\n      formData.append('certificateFile', this.selectedFile);\n      \n      // Add basic activity details\n      formData.append('title', formValues.title);\n      formData.append('activityType', formValues.activityType);\n      formData.append('description', formValues.description);\n      formData.append('eventOrganizer', formValues.eventOrganizer);\n      formData.append('date', formValues.date);\n      formData.append('semester', formValues.semester.toString());\n      formData.append('points', this.calculatedPoints.toString());\n      \n      // Add level for sports activities\n      if (formValues.activityType === 'sports' && formValues.level) {\n        formData.append('level', formValues.level.toString());\n      }\n      \n      // Add student details\n      formData.append('studentId', this.currentUser._id);\n      formData.append('studentName', this.currentUser.name);\n      formData.append('studentDepartment', this.currentUser.department || '');\n      formData.append('studentClass', this.currentUser.class || '');\n      formData.append('studentSemester', (this.currentUser.semester || '').toString());\n      formData.append('studentRollNumber', this.currentUser.rollNumber || '');\n\n      console.log('Submitting activity...');\n\n      this.activityService.submitActivity(formData).subscribe({\n        next: (response) => {\n          console.log('Submission successful:', response);\n          this.isSubmitting = false;\n          this.successMessage = 'Activity submitted successfully!';\n          \n          // Reset form\n          this.activityForm.reset();\n          this.selectedFile = null;\n          const fileInput = document.getElementById('certificateFile') as HTMLInputElement;\n          if (fileInput) {\n            fileInput.value = '';\n          }\n          \n          setTimeout(() => {\n            this.router.navigate(['/dashboard/student']);\n          }, 2000);\n        },\n        error: (error) => {\n          console.error('Submit error details:', {\n            message: error.message,\n            error: error\n          });\n          this.isSubmitting = false;\n          \n          // Handle specific error cases\n          if (error.message.includes('Session expired')) {\n            this.errorMessage = 'Your session has expired. Please login again.';\n            this.router.navigate(['/auth/login']);\n            return;\n          }\n          \n          if (error.message.includes('File size exceeds')) {\n            this.errorMessage = 'The file is too large. Please upload a file smaller than 5MB.';\n            return;\n          }\n          \n          if (error.message.includes('Invalid form data')) {\n            this.errorMessage = 'Please check all your inputs and try again.';\n            return;\n          }\n          \n          this.errorMessage = error.message || 'Failed to submit activity. Please try again.';\n        }\n      });\n    } catch (error) {\n      console.error('Error preparing form data:', error);\n      this.isSubmitting = false;\n      this.errorMessage = 'An error occurred while preparing your submission.';\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
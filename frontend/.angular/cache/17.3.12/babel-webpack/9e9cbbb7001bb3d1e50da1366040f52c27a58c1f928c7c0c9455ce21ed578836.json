{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, timeout, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ActivityService = /*#__PURE__*/(() => {\n  class ActivityService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:5000/api/activities';\n    }\n    submitActivity(activityData) {\n      // Get the token from localStorage\n      const token = localStorage.getItem('token');\n      if (!token) {\n        return throwError(() => new Error('Authentication token not found'));\n      }\n      // Set up headers with authentication but WITHOUT content-type\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      console.log('Submitting activity with URL:', this.apiUrl);\n      console.log('Headers:', headers);\n      console.log('FormData contents:');\n      activityData.forEach((value, key) => {\n        console.log(key, ':', value);\n      });\n      // Return the POST request without observe: 'events' for simpler handling\n      return this.http.post(this.apiUrl, activityData, {\n        headers,\n        reportProgress: true\n      }).pipe(timeout(60000),\n      // 60 second timeout for file uploads\n      retry(1),\n      // Retry failed requests once\n      catchError(this.handleError));\n    }\n    getMyActivities() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        return throwError(() => new Error('Authentication token not found'));\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(this.apiUrl, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    getPendingActivities() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        return throwError(() => new Error('Authentication token not found'));\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(`${this.apiUrl}/pending`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    reviewActivity(id, reviewData) {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        return throwError(() => new Error('Authentication token not found'));\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.put(`${this.apiUrl}/${id}/review`, reviewData, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    getAllActivities() {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        return throwError(() => new Error('Authentication token not found'));\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.get(`${this.apiUrl}/all`, {\n        headers\n      }).pipe(catchError(this.handleError));\n    }\n    generateReport(params = {}) {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        return throwError(() => new Error('Authentication token not found'));\n      }\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      });\n      const queryParams = new URLSearchParams();\n      if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n      if (params.studentIds) queryParams.append('studentIds', params.studentIds);\n      if (params.department) queryParams.append('department', params.department);\n      if (params.class) queryParams.append('class', params.class);\n      if (params.semester) queryParams.append('semester', params.semester);\n      if (params.status) queryParams.append('status', params.status);\n      const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n      return this.http.get(url, {\n        headers\n      });\n    }\n    handleError(error) {\n      console.error('API Error:', error);\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        if (error.error && error.error.message) {\n          errorMessage = error.error.message;\n        } else if (error.status === 0) {\n          errorMessage = 'Unable to connect to the server. Please check your internet connection.';\n        } else if (error.status === 401) {\n          errorMessage = 'Unauthorized. Please log in again.';\n        } else if (error.status === 403) {\n          errorMessage = 'You do not have permission to perform this action.';\n        } else {\n          errorMessage = `Error Code: ${error.status}, Message: ${error.message}`;\n        }\n      }\n      console.error('Formatted error message:', errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function ActivityService_Factory(t) {\n        return new (t || ActivityService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ActivityService,\n        factory: ActivityService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ActivityService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
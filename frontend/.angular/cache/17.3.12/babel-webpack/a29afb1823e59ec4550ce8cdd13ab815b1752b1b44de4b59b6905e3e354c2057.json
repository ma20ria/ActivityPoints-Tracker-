{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class ActivityService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = environment.apiUrl;\n  }\n  getHeaders() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  getApiUrl() {\n    return this.apiUrl;\n  }\n  submitActivity(formData) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No authentication token found');\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    console.log('Submitting activity with token:', token.substring(0, 10) + '...');\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    // Log form data contents (excluding file)\n    const formDataEntries = Array.from(formData.entries());\n    console.log('Form data contents:', formDataEntries.map(([key, value]) => key === 'certificateFile' ? [key, 'File object'] : [key, value]));\n    return this.http.post(`${this.apiUrl}/activities/submit`, formData, {\n      headers,\n      reportProgress: true\n    }).pipe(catchError(error => {\n      console.error('Activity submission error details:', {\n        status: error.status,\n        statusText: error.statusText,\n        error: error.error,\n        headers: error.headers,\n        url: error.url\n      });\n      if (error.status === 401) {\n        console.error('Authentication failed - token expired or invalid');\n        localStorage.removeItem('token');\n        return throwError(() => new Error('Session expired. Please login again.'));\n      }\n      if (error.status === 400) {\n        console.error('Bad request - validation error');\n        return throwError(() => new Error(error.error?.message || 'Invalid form data. Please check your inputs.'));\n      }\n      if (error.status === 413) {\n        console.error('File too large');\n        return throwError(() => new Error('File size exceeds the limit. Please upload a smaller file.'));\n      }\n      if (error.status === 500) {\n        console.error('Server error');\n        return throwError(() => new Error('Server error occurred. Please try again later.'));\n      }\n      return throwError(() => new Error(error.error?.message || 'Failed to submit activity. Please try again.'));\n    }));\n  }\n  getMyActivities() {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/activities/my-activities`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getPendingActivities() {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/activities/pending`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  reviewActivity(id, reviewData) {\n    const headers = this.getHeaders();\n    return this.http.put(`${this.apiUrl}/activities/${id}/review`, reviewData, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getAllActivities() {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/activities`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  generateReport(params = {}) {\n    const headers = this.getHeaders();\n    const queryParams = new URLSearchParams();\n    if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n    if (params.studentIds) queryParams.append('studentIds', params.studentIds);\n    if (params.department) queryParams.append('department', params.department);\n    if (params.class) queryParams.append('class', params.class);\n    if (params.semester) queryParams.append('semester', params.semester);\n    if (params.status) queryParams.append('status', params.status);\n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get(url, {\n      headers\n    });\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      if (error.status === 401) {\n        errorMessage = 'Please login again to continue';\n        // Redirect to login if unauthorized\n        window.location.href = '/auth/login';\n      } else if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Server error. Please try again.`;\n      }\n    }\n    console.error('API Error:', error);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function ActivityService_Factory(t) {\n      return new (t || ActivityService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ActivityService,\n      factory: ActivityService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","environment","ActivityService","constructor","http","authService","apiUrl","getHeaders","token","localStorage","getItem","Error","getApiUrl","submitActivity","formData","console","error","log","substring","headers","formDataEntries","Array","from","entries","map","key","value","post","reportProgress","pipe","status","statusText","url","removeItem","message","getMyActivities","get","handleError","getPendingActivities","reviewActivity","id","reviewData","put","getAllActivities","generateReport","params","queryParams","URLSearchParams","teacherId","append","studentIds","department","class","semester","toString","errorMessage","ErrorEvent","window","location","href","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\services\\activity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Activity } from '../models/activity.model';\nimport { ApiResponse } from '../models/api-response.model';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from './auth.service';\n\ninterface PendingActivitiesResponse {\n  success: boolean;\n  count: number;\n  stats: {\n    pending: number;\n    approved: number;\n    rejected: number;\n  };\n  data: Activity[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) { }\n\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  }\n\n  getApiUrl(): string {\n    return this.apiUrl;\n  }\n\n  submitActivity(formData: FormData): Observable<ApiResponse<Activity>> {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No authentication token found');\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    console.log('Submitting activity with token:', token.substring(0, 10) + '...');\n    \n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    // Log form data contents (excluding file)\n    const formDataEntries = Array.from(formData.entries());\n    console.log('Form data contents:', formDataEntries.map(([key, value]) => \n      key === 'certificateFile' ? [key, 'File object'] : [key, value]\n    ));\n    \n    return this.http.post<ApiResponse<Activity>>(`${this.apiUrl}/activities/submit`, formData, { \n      headers,\n      reportProgress: true\n    }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        console.error('Activity submission error details:', {\n          status: error.status,\n          statusText: error.statusText,\n          error: error.error,\n          headers: error.headers,\n          url: error.url\n        });\n\n        if (error.status === 401) {\n          console.error('Authentication failed - token expired or invalid');\n          localStorage.removeItem('token');\n          return throwError(() => new Error('Session expired. Please login again.'));\n        }\n\n        if (error.status === 400) {\n          console.error('Bad request - validation error');\n          return throwError(() => new Error(error.error?.message || 'Invalid form data. Please check your inputs.'));\n        }\n\n        if (error.status === 413) {\n          console.error('File too large');\n          return throwError(() => new Error('File size exceeds the limit. Please upload a smaller file.'));\n        }\n\n        if (error.status === 500) {\n          console.error('Server error');\n          return throwError(() => new Error('Server error occurred. Please try again later.'));\n        }\n\n        return throwError(() => new Error(error.error?.message || 'Failed to submit activity. Please try again.'));\n      })\n    );\n  }\n\n  getMyActivities(): Observable<ApiResponse<Activity[]>> {\n    const headers = this.getHeaders();\n    return this.http.get<ApiResponse<Activity[]>>(`${this.apiUrl}/activities/my-activities`, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getPendingActivities(): Observable<PendingActivitiesResponse> {\n    const headers = this.getHeaders();\n    return this.http.get<PendingActivitiesResponse>(`${this.apiUrl}/activities/pending`, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  reviewActivity(id: string, reviewData: { status: 'approved' | 'rejected', feedback?: string, pointsAwarded?: number }): Observable<ApiResponse<Activity>> {\n    const headers = this.getHeaders();\n    return this.http.put<ApiResponse<Activity>>(`${this.apiUrl}/activities/${id}/review`, reviewData, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getAllActivities(): Observable<ApiResponse<Activity[]>> {\n    const headers = this.getHeaders();\n    return this.http.get<ApiResponse<Activity[]>>(`${this.apiUrl}/activities`, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  generateReport(params: { \n    teacherId?: string;\n    studentIds?: string;\n    department?: string; \n    class?: string;\n    semester?: string; \n    status?: string \n  } = {}): Observable<ApiResponse<any>> {\n    const headers = this.getHeaders();\n    const queryParams = new URLSearchParams();\n    \n    if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n    if (params.studentIds) queryParams.append('studentIds', params.studentIds);\n    if (params.department) queryParams.append('department', params.department);\n    if (params.class) queryParams.append('class', params.class);\n    if (params.semester) queryParams.append('semester', params.semester);\n    if (params.status) queryParams.append('status', params.status);\n    \n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get<ApiResponse<any>>(url, { headers });\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    let errorMessage = 'An unknown error occurred';\n    \n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      if (error.status === 401) {\n        errorMessage = 'Please login again to continue';\n        // Redirect to login if unauthorized\n        window.location.href = '/auth/login';\n      } else if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Server error. Please try again.`;\n      }\n    }\n    \n    console.error('API Error:', error);\n    return throwError(() => new Error(errorMessage));\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { NgChartsModule, BaseChartDirective } from 'ng2-charts';\nimport { Chart, registerables } from 'chart.js';\nimport { NavbarComponent } from '../../../ui/navbar/navbar.component';\nimport { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../core/services/auth.service\";\nimport * as i2 from \"../../../core/services/activity.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ng2-charts\";\nconst _c0 = (a0, a1, a2) => ({\n  \"bg-success\": a0,\n  \"bg-warning\": a1,\n  \"bg-danger\": a2\n});\nfunction StudentDashboardComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"span\", 10);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"p\", 11);\n    i0.ɵɵtext(5, \"Loading your dashboard...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction StudentDashboardComponent_div_10_tr_71_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 36);\n    i0.ɵɵtext(2, \"No activities submitted yet.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction StudentDashboardComponent_div_10_tr_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\")(9, \"span\", 37);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"titlecase\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"td\");\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const activity_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(activity_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(activity_r1.activityType);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 6, activity_r1.date, \"mediumDate\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(11, _c0, activity_r1.status === \"approved\", activity_r1.status === \"pending\", activity_r1.status === \"rejected\"));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 9, activity_r1.status), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(activity_r1.pointsAwarded || 0);\n  }\n}\nfunction StudentDashboardComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"div\", 12)(3, \"div\", 13)(4, \"div\", 14)(5, \"h3\", 15);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 16);\n    i0.ɵɵtext(8, \"Total Points\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(9, \"div\", 12)(10, \"div\", 13)(11, \"div\", 14)(12, \"h3\", 17);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"p\", 16);\n    i0.ɵɵtext(15, \"Total Activities\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(16, \"div\", 12)(17, \"div\", 13)(18, \"div\", 14)(19, \"h3\", 18);\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"p\", 16);\n    i0.ɵɵtext(22, \"Approved\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(23, \"div\", 19)(24, \"div\", 13)(25, \"div\", 14)(26, \"h3\", 20);\n    i0.ɵɵtext(27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"p\", 16);\n    i0.ɵɵtext(29, \"Pending\");\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(30, \"div\", 1)(31, \"div\", 21)(32, \"div\", 22)(33, \"div\", 23)(34, \"h5\", 4);\n    i0.ɵɵtext(35, \"Activity Status\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(36, \"div\", 24)(37, \"div\", 25);\n    i0.ɵɵelement(38, \"canvas\", 26);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(39, \"div\", 27)(40, \"div\", 22)(41, \"div\", 23)(42, \"h5\", 4);\n    i0.ɵɵtext(43, \"Points by Semester\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(44, \"div\", 24)(45, \"div\", 28);\n    i0.ɵɵelement(46, \"canvas\", 26);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(47, \"div\", 29)(48, \"div\", 2)(49, \"div\", 30)(50, \"div\", 31)(51, \"h5\", 4);\n    i0.ɵɵtext(52, \"Recent Activities\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(53, \"a\", 32);\n    i0.ɵɵtext(54, \"View All\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(55, \"div\", 24)(56, \"div\", 33)(57, \"table\", 34)(58, \"thead\")(59, \"tr\")(60, \"th\");\n    i0.ɵɵtext(61, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(62, \"th\");\n    i0.ɵɵtext(63, \"Type\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(64, \"th\");\n    i0.ɵɵtext(65, \"Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(66, \"th\");\n    i0.ɵɵtext(67, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(68, \"th\");\n    i0.ɵɵtext(69, \"Points\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(70, \"tbody\");\n    i0.ɵɵtemplate(71, StudentDashboardComponent_div_10_tr_71_Template, 3, 0, \"tr\", 7)(72, StudentDashboardComponent_div_10_tr_72_Template, 14, 15, \"tr\", 35);\n    i0.ɵɵelementEnd()()()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r1.totalPoints);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r1.totalActivities);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r1.approvedActivities);\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(ctx_r1.pendingActivities);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"data\", ctx_r1.doughnutChartData)(\"options\", ctx_r1.doughnutChartOptions)(\"type\", \"doughnut\");\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"data\", ctx_r1.barChartData)(\"options\", ctx_r1.barChartOptions)(\"type\", ctx_r1.barChartType);\n    i0.ɵɵadvance(25);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.activities.length === 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.activities.slice(0, 5));\n  }\n}\n// Register Chart.js components\nChart.register(...registerables);\nexport let StudentDashboardComponent = /*#__PURE__*/(() => {\n  class StudentDashboardComponent {\n    constructor(authService, activityService) {\n      this.authService = authService;\n      this.activityService = activityService;\n      this.currentUser = null;\n      this.activities = [];\n      this.isLoading = true;\n      // Activity stats\n      this.totalActivities = 0;\n      this.pendingActivities = 0;\n      this.approvedActivities = 0;\n      this.rejectedActivities = 0;\n      this.totalPoints = 0;\n      this.categoryPoints = 0;\n      // Doughnut chart\n      this.doughnutChartData = {\n        labels: ['Approved', 'Pending', 'Rejected'],\n        datasets: [{\n          data: [0, 0, 0],\n          backgroundColor: ['#28a745', '#ffc107', '#dc3545'],\n          hoverOffset: 4\n        }]\n      };\n      this.doughnutChartOptions = {\n        responsive: true,\n        maintainAspectRatio: true,\n        layout: {\n          padding: 10\n        },\n        plugins: {\n          legend: {\n            display: true,\n            position: 'bottom',\n            labels: {\n              padding: 15,\n              font: {\n                size: 11\n              },\n              boxWidth: 12\n            }\n          }\n        }\n      };\n      // Bar chart for activity types\n      this.barChartType = 'bar';\n      this.barChartData = {\n        labels: ['Semester 1', 'Semester 2', 'Semester 3', 'Semester 4', 'Semester 5', 'Semester 6', 'Semester 7', 'Semester 8'],\n        datasets: [{\n          data: [15, 20, 25, 30, 35, 40, 45, 50],\n          label: 'Points Earned',\n          backgroundColor: '#007bff',\n          borderColor: '#007bff',\n          borderWidth: 1,\n          barThickness: 30,\n          maxBarThickness: 40\n        }]\n      };\n      this.barChartOptions = {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              font: {\n                size: 12\n              }\n            }\n          },\n          y: {\n            beginAtZero: true,\n            ticks: {\n              stepSize: 10,\n              font: {\n                size: 12\n              }\n            },\n            grid: {\n              color: '#f0f0f0'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            enabled: true,\n            callbacks: {\n              label: function (context) {\n                return `Points: ${context.raw}`;\n              }\n            }\n          }\n        },\n        animation: {\n          duration: 500\n        }\n      };\n    }\n    ngOnInit() {\n      this.currentUser = this.authService.getCurrentUser();\n      this.loadActivities();\n      // Set up automatic refresh every 30 seconds\n      this.refreshSubscription = interval(30000).subscribe(() => {\n        this.loadActivities();\n      });\n    }\n    ngOnDestroy() {\n      if (this.refreshSubscription) {\n        this.refreshSubscription.unsubscribe();\n      }\n    }\n    loadActivities() {\n      this.isLoading = true;\n      this.activityService.getMyActivities().subscribe({\n        next: response => {\n          if (response && response.data) {\n            this.activities = response.data;\n            console.log('Activities loaded:', this.activities);\n            this.calculateStats();\n            this.updateCharts();\n            // Force another chart update after a short delay\n            setTimeout(() => {\n              this.chart?.update();\n            }, 100);\n          } else {\n            this.activities = [];\n          }\n          this.isLoading = false;\n        },\n        error: error => {\n          console.error('Error loading activities:', error);\n          this.isLoading = false;\n        }\n      });\n    }\n    calculateStats() {\n      this.totalActivities = this.activities.length;\n      this.pendingActivities = this.activities.filter(a => a.status === 'pending').length;\n      this.approvedActivities = this.activities.filter(a => a.status === 'approved').length;\n      this.rejectedActivities = this.activities.filter(a => a.status === 'rejected').length;\n      this.totalPoints = this.activities.filter(activity => activity.status === 'approved').reduce((sum, activity) => sum + (activity.pointsAwarded || 0), 0);\n      this.categoryPoints = this.activities.filter(activity => activity.status === 'approved').reduce((sum, activity) => sum + (activity.pointsAwarded || 0), 0);\n    }\n    updateCharts() {\n      // Update doughnut chart\n      this.doughnutChartData.datasets[0].data = [this.approvedActivities, this.pendingActivities, this.rejectedActivities];\n      // Update bar chart with points by semester\n      const semesters = [1, 2, 3, 4, 5, 6, 7, 8];\n      const pointsBySemester = semesters.map(semester => {\n        const semesterPoints = this.activities.filter(a => a.status === 'approved' && Number(a.semester) === semester).reduce((sum, activity) => sum + (Number(activity.pointsAwarded) || 0), 0);\n        console.log(`Semester ${semester} points:`, semesterPoints);\n        return semesterPoints;\n      });\n      console.log('Points by semester:', pointsBySemester);\n      // Create new dataset with updated data\n      const newDataset = {\n        ...this.barChartData.datasets[0],\n        data: pointsBySemester\n      };\n      // Update chart data with new dataset\n      this.barChartData = {\n        labels: this.barChartData.labels,\n        datasets: [newDataset]\n      };\n      // Force chart update\n      if (this.chart) {\n        this.chart.render();\n        setTimeout(() => {\n          this.chart?.update();\n        }, 100);\n      }\n    }\n    // Helper method to determine semester from activity date\n    getSemesterFromDate(date) {\n      const activityDate = new Date(date);\n      const currentYear = new Date().getFullYear();\n      const activityYear = activityDate.getFullYear();\n      const yearDiff = currentYear - activityYear;\n      // Determine if it's first or second half of the year (semester 1 or 2 within a year)\n      const isSecondHalf = activityDate.getMonth() >= 6; // July onwards is second semester\n      // Calculate semester based on year difference and half of year\n      // Assuming student is currently in 8th semester at most\n      const maxSemesters = 8;\n      const currentSemester = Math.min(maxSemesters, yearDiff * 2 + (isSecondHalf ? 2 : 1));\n      // Return a semester between 1 and 8\n      return Math.max(1, currentSemester);\n    }\n    static {\n      this.ɵfac = function StudentDashboardComponent_Factory(t) {\n        return new (t || StudentDashboardComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.ActivityService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: StudentDashboardComponent,\n        selectors: [[\"app-student-dashboard\"]],\n        viewQuery: function StudentDashboardComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(BaseChartDirective, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n          }\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 11,\n        vars: 2,\n        consts: [[1, \"container\", \"py-4\"], [1, \"row\", \"mb-4\"], [1, \"col-12\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"mb-0\"], [\"routerLink\", \"/activities/submit\", 1, \"btn\", \"btn-primary\"], [\"class\", \"text-center py-5\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"text-center\", \"py-5\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\"], [1, \"visually-hidden\"], [1, \"mt-2\"], [1, \"col-md-3\", \"mb-3\", \"mb-md-0\"], [1, \"card\", \"h-100\", \"border-0\", \"shadow-sm\"], [1, \"card-body\", \"d-flex\", \"flex-column\", \"align-items-center\"], [1, \"text-primary\", \"mb-0\"], [1, \"text-muted\", \"mb-0\"], [1, \"text-info\", \"mb-0\"], [1, \"text-success\", \"mb-0\"], [1, \"col-md-3\"], [1, \"text-warning\", \"mb-0\"], [1, \"col-md-6\", \"mb-4\", \"mb-md-0\"], [1, \"card\", \"border-0\", \"shadow-sm\", \"h-100\"], [1, \"card-header\", \"bg-white\", \"border-0\"], [1, \"card-body\"], [1, \"chart-container\", \"doughnut-container\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"type\"], [1, \"col-md-6\"], [1, \"chart-container\", 2, \"position\", \"relative\", \"height\", \"300px\", \"width\", \"100%\"], [1, \"row\"], [1, \"card\", \"border-0\", \"shadow-sm\"], [1, \"card-header\", \"bg-white\", \"border-0\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [\"routerLink\", \"/activities\", 1, \"btn\", \"btn-sm\", \"btn-outline-primary\"], [1, \"table-responsive\"], [1, \"table\", \"table-hover\"], [4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"5\", 1, \"text-center\", \"py-3\"], [1, \"badge\", 3, \"ngClass\"]],\n        template: function StudentDashboardComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelement(0, \"app-navbar\");\n            i0.ɵɵelementStart(1, \"div\", 0)(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"h1\", 4);\n            i0.ɵɵtext(6, \"Student Dashboard\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"a\", 5);\n            i0.ɵɵtext(8, \"Submit New Activity\");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵtemplate(9, StudentDashboardComponent_div_9_Template, 6, 0, \"div\", 6)(10, StudentDashboardComponent_div_10_Template, 73, 12, \"div\", 7);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(9);\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n          }\n        },\n        dependencies: [CommonModule, i3.NgClass, i3.NgForOf, i3.NgIf, i3.TitleCasePipe, i3.DatePipe, RouterLink, NgChartsModule, i4.BaseChartDirective, NavbarComponent],\n        styles: [\".shadow-sm[_ngcontent-%COMP%]{box-shadow:0 .125rem .25rem #00000013!important}.card[_ngcontent-%COMP%]{transition:all .3s ease}.card[_ngcontent-%COMP%]:hover{transform:translateY(-5px);box-shadow:0 .5rem 1rem #00000026!important}.chart-container[_ngcontent-%COMP%]{position:relative;margin:auto;height:300px;width:100%}.chart-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{width:100%!important;height:100%!important}.doughnut-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;height:300px;padding:10px}.doughnut-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{max-width:300px!important;max-height:300px!important;width:100%!important;height:100%!important}h3[_ngcontent-%COMP%]{font-size:2rem;font-weight:600}.text-muted[_ngcontent-%COMP%]{font-size:.9rem}.badge[_ngcontent-%COMP%]{padding:.5em .75em;font-weight:500}.table[_ngcontent-%COMP%]{font-size:.95rem}.table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{font-weight:600;color:#495057}.card-header[_ngcontent-%COMP%]{padding:1rem 1.25rem}.card-header[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%]{font-weight:600}@media (max-width: 768px){.chart-container[_ngcontent-%COMP%]{height:250px}.doughnut-container[_ngcontent-%COMP%]{height:250px;padding:10px}.doughnut-container[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%]{max-width:250px!important;max-height:250px!important}}\"]\n      });\n    }\n  }\n  return StudentDashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
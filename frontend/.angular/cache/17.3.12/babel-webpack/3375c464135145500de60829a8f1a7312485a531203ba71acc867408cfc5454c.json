{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class ActivityService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiUrl}/api/activities`;\n  }\n  getHeaders() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  submitActivity(formData) {\n    const headers = this.getHeaders();\n    return this.http.post(`${this.apiUrl}/submit`, formData, {\n      headers,\n      reportProgress: true\n    }).pipe(catchError(this.handleError));\n  }\n  getMyActivities() {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/my-activities`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getPendingActivities() {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/pending`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  reviewActivity(id, reviewData) {\n    const headers = this.getHeaders();\n    return this.http.put(`${this.apiUrl}/${id}/review`, reviewData, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getStudentReport(studentId) {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/student-report/${studentId}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getTeacherReport(teacherId) {\n    const headers = this.getHeaders();\n    return this.http.get(`${this.apiUrl}/teacher-report/${teacherId}`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  generateReport(params) {\n    const headers = this.getHeaders();\n    const queryParams = new URLSearchParams();\n    if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n    if (params.studentIds?.length) queryParams.append('studentIds', params.studentIds.join(','));\n    if (params.department) queryParams.append('department', params.department);\n    if (params.class) queryParams.append('class', params.class);\n    if (params.semester) queryParams.append('semester', params.semester.toString());\n    if (params.status) queryParams.append('status', params.status);\n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get(url, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      switch (error.status) {\n        case 401:\n          errorMessage = 'Session expired. Please login again.';\n          this.authService.logout();\n          break;\n        case 403:\n          errorMessage = 'You do not have permission to perform this action.';\n          break;\n        case 404:\n          errorMessage = 'The requested resource was not found.';\n          break;\n        case 413:\n          errorMessage = 'File size too large. Please upload a smaller file.';\n          break;\n        case 415:\n          errorMessage = 'Invalid file type. Please upload PDF, JPG, JPEG, or PNG files only.';\n          break;\n        case 500:\n          errorMessage = 'Server error. Please try again later.';\n          break;\n        default:\n          errorMessage = error.error?.message || 'An error occurred. Please try again.';\n      }\n    }\n    console.error('API Error:', error);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function ActivityService_Factory(t) {\n      return new (t || ActivityService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ActivityService,\n      factory: ActivityService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","environment","ActivityService","constructor","http","authService","apiUrl","getHeaders","token","localStorage","getItem","Error","submitActivity","formData","headers","post","reportProgress","pipe","handleError","getMyActivities","get","getPendingActivities","reviewActivity","id","reviewData","put","getStudentReport","studentId","getTeacherReport","teacherId","generateReport","params","queryParams","URLSearchParams","append","studentIds","length","join","department","class","semester","toString","status","url","error","errorMessage","ErrorEvent","message","logout","console","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\services\\activity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Activity } from '../models/activity.model';\nimport { environment } from '../../../environments/environment';\nimport { AuthService } from './auth.service';\n\n// Define the API response interfaces\ninterface ApiResponse<T> {\n  success: boolean;\n  count?: number;\n  data: T;\n  message?: string;\n}\n\ninterface PendingActivitiesResponse {\n  success: boolean;\n  count: number;\n  stats: {\n    pending: number;\n    approved: number;\n    rejected: number;\n  };\n  data: Activity[];\n}\n\ninterface StudentReport {\n  studentId: string;\n  studentName: string;\n  totalPoints: number;\n  activities: Activity[];\n}\n\ninterface ReportParams {\n  teacherId?: string;\n  studentIds?: string[];\n  department?: string;\n  class?: string;\n  semester?: number;\n  status?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityService {\n  private apiUrl = `${environment.apiUrl}/api/activities`;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) { }\n\n  private getHeaders(): HttpHeaders {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No authentication token found');\n    }\n    return new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n  }\n\n  submitActivity(formData: FormData): Observable<ApiResponse<Activity>> {\n    const headers = this.getHeaders();\n    return this.http.post<ApiResponse<Activity>>(`${this.apiUrl}/submit`, formData, { \n      headers,\n      reportProgress: true\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getMyActivities(): Observable<ApiResponse<Activity[]>> {\n    const headers = this.getHeaders();\n    return this.http.get<ApiResponse<Activity[]>>(`${this.apiUrl}/my-activities`, { headers })\n      .pipe(catchError(this.handleError));\n  }\n\n  getPendingActivities(): Observable<PendingActivitiesResponse> {\n    const headers = this.getHeaders();\n    return this.http.get<PendingActivitiesResponse>(`${this.apiUrl}/pending`, { headers })\n      .pipe(catchError(this.handleError));\n  }\n\n  reviewActivity(id: string, reviewData: { \n    status: 'approved' | 'rejected', \n    feedback?: string, \n    pointsAwarded?: number \n  }): Observable<ApiResponse<Activity>> {\n    const headers = this.getHeaders();\n    return this.http.put<ApiResponse<Activity>>(\n      `${this.apiUrl}/${id}/review`, \n      reviewData,\n      { headers }\n    ).pipe(catchError(this.handleError));\n  }\n\n  getStudentReport(studentId: string): Observable<ApiResponse<StudentReport>> {\n    const headers = this.getHeaders();\n    return this.http.get<ApiResponse<StudentReport>>(\n      `${this.apiUrl}/student-report/${studentId}`,\n      { headers }\n    ).pipe(catchError(this.handleError));\n  }\n\n  getTeacherReport(teacherId: string): Observable<ApiResponse<StudentReport[]>> {\n    const headers = this.getHeaders();\n    return this.http.get<ApiResponse<StudentReport[]>>(\n      `${this.apiUrl}/teacher-report/${teacherId}`,\n      { headers }\n    ).pipe(catchError(this.handleError));\n  }\n\n  generateReport(params: ReportParams): Observable<ApiResponse<Activity[]>> {\n    const headers = this.getHeaders();\n    const queryParams = new URLSearchParams();\n    \n    if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n    if (params.studentIds?.length) queryParams.append('studentIds', params.studentIds.join(','));\n    if (params.department) queryParams.append('department', params.department);\n    if (params.class) queryParams.append('class', params.class);\n    if (params.semester) queryParams.append('semester', params.semester.toString());\n    if (params.status) queryParams.append('status', params.status);\n    \n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get<ApiResponse<Activity[]>>(url, { headers })\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'An unknown error occurred';\n    \n    if (error.error instanceof ErrorEvent) {\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      switch (error.status) {\n        case 401:\n          errorMessage = 'Session expired. Please login again.';\n          this.authService.logout();\n          break;\n        case 403:\n          errorMessage = 'You do not have permission to perform this action.';\n          break;\n        case 404:\n          errorMessage = 'The requested resource was not found.';\n          break;\n        case 413:\n          errorMessage = 'File size too large. Please upload a smaller file.';\n          break;\n        case 415:\n          errorMessage = 'Invalid file type. Please upload PDF, JPG, JPEG, or PNG files only.';\n          break;\n        case 500:\n          errorMessage = 'Server error. Please try again later.';\n          break;\n        default:\n          errorMessage = error.error?.message || 'An error occurred. Please try again.';\n      }\n    }\n    \n    console.error('API Error:', error);\n    return throwError(() => new Error(errorMessage));\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
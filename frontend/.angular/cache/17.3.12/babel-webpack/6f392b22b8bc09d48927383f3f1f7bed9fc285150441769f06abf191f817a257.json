{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nexport const roleGuard = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  const allowedRoles = route.data?.['roles'];\n  const userRole = authService.getCurrentUserRole();\n  if (userRole && allowedRoles.includes(userRole)) {\n    return true;\n  }\n  router.navigate(['/dashboard', userRole]);\n  return false;\n};","map":{"version":3,"names":["inject","Router","AuthService","roleGuard","route","state","authService","router","allowedRoles","data","userRole","getCurrentUserRole","includes","navigate"],"sources":["C:\\Users\\user\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\guards\\role.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { CanActivateFn, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\nexport const roleGuard: CanActivateFn = (route, state) => {\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  \n  const allowedRoles = route.data?.['roles'] as string[];\n  const userRole = authService.getCurrentUserRole();\n  \n  if (userRole && allowedRoles.includes(userRole)) {\n    return true;\n  }\n  \n  router.navigate(['/dashboard', userRole]);\n  return false;\n}; "],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAwBC,MAAM,QAAQ,iBAAiB;AACvD,SAASC,WAAW,QAAQ,0BAA0B;AAEtD,OAAO,MAAMC,SAAS,GAAkBA,CAACC,KAAK,EAAEC,KAAK,KAAI;EACvD,MAAMC,WAAW,GAAGN,MAAM,CAACE,WAAW,CAAC;EACvC,MAAMK,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC;EAE7B,MAAMO,YAAY,GAAGJ,KAAK,CAACK,IAAI,GAAG,OAAO,CAAa;EACtD,MAAMC,QAAQ,GAAGJ,WAAW,CAACK,kBAAkB,EAAE;EAEjD,IAAID,QAAQ,IAAIF,YAAY,CAACI,QAAQ,CAACF,QAAQ,CAAC,EAAE;IAC/C,OAAO,IAAI;;EAGbH,MAAM,CAACM,QAAQ,CAAC,CAAC,YAAY,EAAEH,QAAQ,CAAC,CAAC;EACzC,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
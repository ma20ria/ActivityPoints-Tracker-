{"ast":null,"code":"import { BehaviorSubject, tap, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.apiUrl = 'http://localhost:5000/api/auth';\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.loadUserFromStorage();\n    }\n    loadUserFromStorage() {\n      const userData = localStorage.getItem('user');\n      if (userData) {\n        this.currentUserSubject.next(JSON.parse(userData));\n      }\n    }\n    register(userData) {\n      return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n        if (response.success) {\n          this.handleAuthentication(response);\n        }\n      }), catchError(error => {\n        if (error.error?.message?.includes('already exists')) {\n          throw {\n            error: {\n              message: 'User already exists'\n            }\n          };\n        }\n        throw error.error || {\n          message: 'Registration failed'\n        };\n      }));\n    }\n    login(credentials) {\n      return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n        if (response.success) {\n          this.handleAuthentication(response);\n          this.router.navigate(['/dashboard']);\n        }\n      }), catchError(error => {\n        console.error('Login error:', error);\n        throw error.error || {\n          message: 'Login failed. Please check your credentials.'\n        };\n      }));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/auth/login']);\n    }\n    handleAuthentication(response) {\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n      }\n      if (response.user) {\n        localStorage.setItem('user', JSON.stringify(response.user));\n        this.currentUserSubject.next(response.user);\n      }\n    }\n    isAuthenticated() {\n      return !!localStorage.getItem('token');\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    getCurrentUserRole() {\n      const user = this.getCurrentUser();\n      return user ? user.role : null;\n    }\n    getAuthToken() {\n      return localStorage.getItem('token');\n    }\n    forgotPassword(email) {\n      return this.http.post(`${this.apiUrl}/forgot-password`, {\n        email\n      });\n    }\n    resetPassword(token, password) {\n      return this.http.put(`${this.apiUrl}/reset-password/${token}`, {\n        password\n      });\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nlet ResetPasswordComponent = class ResetPasswordComponent {\n  constructor(authService, route) {\n    this.authService = authService;\n    this.route = route;\n    this.password = '';\n    this.confirmPassword = '';\n    this.message = '';\n    this.messageType = 'success';\n    this.isLoading = false;\n    this.resetToken = '';\n  }\n  ngOnInit() {\n    this.resetToken = this.route.snapshot.params['token'];\n    if (!this.resetToken) {\n      this.message = 'Invalid reset token';\n      this.messageType = 'danger';\n    }\n  }\n  get isValid() {\n    return this.password.length >= 6 && this.password === this.confirmPassword;\n  }\n  onSubmit() {\n    if (!this.isValid) {\n      this.message = 'Passwords do not match or are too short';\n      this.messageType = 'danger';\n      return;\n    }\n    this.isLoading = true;\n    this.message = '';\n    this.authService.resetPassword(this.resetToken, this.password).subscribe({\n      next: response => {\n        this.message = 'Password has been reset successfully';\n        this.messageType = 'success';\n        this.isLoading = false;\n      },\n      error: error => {\n        this.message = error.error?.message || 'An error occurred';\n        this.messageType = 'danger';\n        this.isLoading = false;\n      }\n    });\n  }\n};\nResetPasswordComponent = __decorate([Component({\n  selector: 'app-reset-password',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterLink],\n  template: `\n    <div class=\"container mt-5\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-6\">\n          <div class=\"card\">\n            <div class=\"card-body\">\n              <h2 class=\"card-title text-center mb-4\">Reset Password</h2>\n              \n              <div *ngIf=\"message\" class=\"alert\" [ngClass]=\"messageType === 'success' ? 'alert-success' : 'alert-danger'\">\n                {{ message }}\n              </div>\n\n              <form (ngSubmit)=\"onSubmit()\">\n                <div class=\"mb-3\">\n                  <label for=\"password\" class=\"form-label\">New Password</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    id=\"password\"\n                    [(ngModel)]=\"password\"\n                    name=\"password\"\n                    required\n                    minlength=\"6\"\n                  >\n                </div>\n\n                <div class=\"mb-3\">\n                  <label for=\"confirmPassword\" class=\"form-label\">Confirm Password</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    id=\"confirmPassword\"\n                    [(ngModel)]=\"confirmPassword\"\n                    name=\"confirmPassword\"\n                    required\n                    minlength=\"6\"\n                  >\n                </div>\n\n                <div class=\"d-grid gap-2\">\n                  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"isLoading || !isValid\">\n                    {{ isLoading ? 'Resetting...' : 'Reset Password' }}\n                  </button>\n                </div>\n\n                <div class=\"text-center mt-3\">\n                  <a routerLink=\"/login\">Back to Login</a>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n})], ResetPasswordComponent);\nexport { ResetPasswordComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","RouterLink","ResetPasswordComponent","constructor","authService","route","password","confirmPassword","message","messageType","isLoading","resetToken","ngOnInit","snapshot","params","isValid","length","onSubmit","resetPassword","subscribe","next","response","error","__decorate","selector","standalone","imports","template"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\features\\auth\\reset-password\\reset-password.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterLink, ActivatedRoute } from '@angular/router';\r\nimport { AuthService } from '../../../../core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterLink],\r\n  template: `\r\n    <div class=\"container mt-5\">\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-md-6\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <h2 class=\"card-title text-center mb-4\">Reset Password</h2>\r\n              \r\n              <div *ngIf=\"message\" class=\"alert\" [ngClass]=\"messageType === 'success' ? 'alert-success' : 'alert-danger'\">\r\n                {{ message }}\r\n              </div>\r\n\r\n              <form (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"password\" class=\"form-label\">New Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    class=\"form-control\"\r\n                    id=\"password\"\r\n                    [(ngModel)]=\"password\"\r\n                    name=\"password\"\r\n                    required\r\n                    minlength=\"6\"\r\n                  >\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label for=\"confirmPassword\" class=\"form-label\">Confirm Password</label>\r\n                  <input\r\n                    type=\"password\"\r\n                    class=\"form-control\"\r\n                    id=\"confirmPassword\"\r\n                    [(ngModel)]=\"confirmPassword\"\r\n                    name=\"confirmPassword\"\r\n                    required\r\n                    minlength=\"6\"\r\n                  >\r\n                </div>\r\n\r\n                <div class=\"d-grid gap-2\">\r\n                  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"isLoading || !isValid\">\r\n                    {{ isLoading ? 'Resetting...' : 'Reset Password' }}\r\n                  </button>\r\n                </div>\r\n\r\n                <div class=\"text-center mt-3\">\r\n                  <a routerLink=\"/login\">Back to Login</a>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  password: string = '';\r\n  confirmPassword: string = '';\r\n  message: string = '';\r\n  messageType: 'success' | 'danger' = 'success';\r\n  isLoading: boolean = false;\r\n  resetToken: string = '';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.resetToken = this.route.snapshot.params['token'];\r\n    if (!this.resetToken) {\r\n      this.message = 'Invalid reset token';\r\n      this.messageType = 'danger';\r\n    }\r\n  }\r\n\r\n  get isValid(): boolean {\r\n    return this.password.length >= 6 && this.password === this.confirmPassword;\r\n  }\r\n\r\n  onSubmit() {\r\n    if (!this.isValid) {\r\n      this.message = 'Passwords do not match or are too short';\r\n      this.messageType = 'danger';\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.message = '';\r\n    \r\n    this.authService.resetPassword(this.resetToken, this.password).subscribe({\r\n      next: (response) => {\r\n        this.message = 'Password has been reset successfully';\r\n        this.messageType = 'success';\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.message = error.error?.message || 'An error occurred';\r\n        this.messageType = 'danger';\r\n        this.isLoading = false;\r\n      }\r\n    });\r\n  }\r\n} "],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,UAAU,QAAwB,iBAAiB;AA+DrD,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAQjCC,YACUC,WAAwB,EACxBC,KAAqB;IADrB,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,KAAK,GAALA,KAAK;IATf,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,OAAO,GAAW,EAAE;IACpB,KAAAC,WAAW,GAAyB,SAAS;IAC7C,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,UAAU,GAAW,EAAE;EAKpB;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACD,UAAU,GAAG,IAAI,CAACN,KAAK,CAACQ,QAAQ,CAACC,MAAM,CAAC,OAAO,CAAC;IACrD,IAAI,CAAC,IAAI,CAACH,UAAU,EAAE;MACpB,IAAI,CAACH,OAAO,GAAG,qBAAqB;MACpC,IAAI,CAACC,WAAW,GAAG,QAAQ;;EAE/B;EAEA,IAAIM,OAAOA,CAAA;IACT,OAAO,IAAI,CAACT,QAAQ,CAACU,MAAM,IAAI,CAAC,IAAI,IAAI,CAACV,QAAQ,KAAK,IAAI,CAACC,eAAe;EAC5E;EAEAU,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;MACjB,IAAI,CAACP,OAAO,GAAG,yCAAyC;MACxD,IAAI,CAACC,WAAW,GAAG,QAAQ;MAC3B;;IAGF,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACF,OAAO,GAAG,EAAE;IAEjB,IAAI,CAACJ,WAAW,CAACc,aAAa,CAAC,IAAI,CAACP,UAAU,EAAE,IAAI,CAACL,QAAQ,CAAC,CAACa,SAAS,CAAC;MACvEC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACb,OAAO,GAAG,sCAAsC;QACrD,IAAI,CAACC,WAAW,GAAG,SAAS;QAC5B,IAAI,CAACC,SAAS,GAAG,KAAK;MACxB,CAAC;MACDY,KAAK,EAAGA,KAAK,IAAI;QACf,IAAI,CAACd,OAAO,GAAGc,KAAK,CAACA,KAAK,EAAEd,OAAO,IAAI,mBAAmB;QAC1D,IAAI,CAACC,WAAW,GAAG,QAAQ;QAC3B,IAAI,CAACC,SAAS,GAAG,KAAK;MACxB;KACD,CAAC;EACJ;CACD;AAhDYR,sBAAsB,GAAAqB,UAAA,EA5DlCzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,oBAAoB;EAC9BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC3B,YAAY,EAAEC,WAAW,EAAEC,UAAU,CAAC;EAChD0B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuDX,CAAC,C,EACWzB,sBAAsB,CAgDlC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
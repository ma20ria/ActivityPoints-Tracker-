{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/users';\n  }\n  getAllUsers() {\n    return this.http.get(this.apiUrl).pipe(map(response => response.data));\n  }\n  getUsersByRole(role) {\n    return this.http.get(`${this.apiUrl}/role/${role}`).pipe(map(response => response.data));\n  }\n  getUserById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(map(response => response.data));\n  }\n  updateUser(id, userData) {\n    return this.http.put(`${this.apiUrl}/${id}`, userData).pipe(map(response => response.data));\n  }\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getAssignedStudents(teacherId) {\n    return this.http.get(`${this.apiUrl}/teacher/${teacherId}/students`).pipe(map(response => {\n      if (!response.success) {\n        throw new Error(response.message || 'Failed to fetch students');\n      }\n      return response.data;\n    }));\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["map","UserService","constructor","http","apiUrl","getAllUsers","get","pipe","response","data","getUsersByRole","role","getUserById","id","updateUser","userData","put","deleteUser","delete","getAssignedStudents","teacherId","success","Error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { User } from '../models/user.model';\n\ninterface ApiResponse<T> {\n  success: boolean;\n  data: T;\n  message?: string;\n  count?: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl = 'http://localhost:5000/api/users';\n\n  constructor(private http: HttpClient) { }\n\n  getAllUsers(): Observable<User[]> {\n    return this.http.get<ApiResponse<User[]>>(this.apiUrl).pipe(\n      map(response => response.data)\n    );\n  }\n\n  getUsersByRole(role: string): Observable<User[]> {\n    return this.http.get<ApiResponse<User[]>>(`${this.apiUrl}/role/${role}`).pipe(\n      map(response => response.data)\n    );\n  }\n\n  getUserById(id: string): Observable<User> {\n    return this.http.get<ApiResponse<User>>(`${this.apiUrl}/${id}`).pipe(\n      map(response => response.data)\n    );\n  }\n\n  updateUser(id: string, userData: Partial<User>): Observable<User> {\n    return this.http.put<ApiResponse<User>>(`${this.apiUrl}/${id}`, userData).pipe(\n      map(response => response.data)\n    );\n  }\n\n  deleteUser(id: string): Observable<any> {\n    return this.http.delete<ApiResponse<any>>(`${this.apiUrl}/${id}`);\n  }\n\n  getAssignedStudents(teacherId: string): Observable<User[]> {\n    return this.http.get<ApiResponse<User[]>>(`${this.apiUrl}/teacher/${teacherId}/students`).pipe(\n      map(response => {\n        if (!response.success) {\n          throw new Error(response.message || 'Failed to fetch students');\n        }\n        return response.data;\n      })\n    );\n  }\n} "],"mappings":"AAEA,SAAqBA,GAAG,QAAQ,MAAM;;;AAatC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,iCAAiC;EAEV;EAExCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAsB,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CACzDP,GAAG,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACH;EAEAC,cAAcA,CAACC,IAAY;IACzB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAsB,GAAG,IAAI,CAACF,MAAM,SAASO,IAAI,EAAE,CAAC,CAACJ,IAAI,CAC3EP,GAAG,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACH;EAEAG,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAoB,GAAG,IAAI,CAACF,MAAM,IAAIS,EAAE,EAAE,CAAC,CAACN,IAAI,CAClEP,GAAG,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACH;EAEAK,UAAUA,CAACD,EAAU,EAAEE,QAAuB;IAC5C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAoB,GAAG,IAAI,CAACZ,MAAM,IAAIS,EAAE,EAAE,EAAEE,QAAQ,CAAC,CAACR,IAAI,CAC5EP,GAAG,CAACQ,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACH;EAEAQ,UAAUA,CAACJ,EAAU;IACnB,OAAO,IAAI,CAACV,IAAI,CAACe,MAAM,CAAmB,GAAG,IAAI,CAACd,MAAM,IAAIS,EAAE,EAAE,CAAC;EACnE;EAEAM,mBAAmBA,CAACC,SAAiB;IACnC,OAAO,IAAI,CAACjB,IAAI,CAACG,GAAG,CAAsB,GAAG,IAAI,CAACF,MAAM,YAAYgB,SAAS,WAAW,CAAC,CAACb,IAAI,CAC5FP,GAAG,CAACQ,QAAQ,IAAG;MACb,IAAI,CAACA,QAAQ,CAACa,OAAO,EAAE;QACrB,MAAM,IAAIC,KAAK,CAACd,QAAQ,CAACe,OAAO,IAAI,0BAA0B,CAAC;;MAEjE,OAAOf,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,CACH;EACH;;;uBA1CWR,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX1B,WAAW;MAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
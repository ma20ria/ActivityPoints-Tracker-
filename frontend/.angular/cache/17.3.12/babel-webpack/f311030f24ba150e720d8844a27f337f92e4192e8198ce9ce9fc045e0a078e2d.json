{"ast":null,"code":"import { BehaviorSubject, tap, catchError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:5000/api/auth';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  loadUserFromStorage() {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      this.currentUserSubject.next(JSON.parse(userData));\n    }\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(response => {\n      if (response.success) {\n        this.handleAuthentication(response);\n      }\n    }));\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      if (response.success) {\n        this.handleAuthentication(response);\n      }\n    }), catchError(error => {\n      throw error.error || {\n        message: 'Login failed'\n      };\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  handleAuthentication(response) {\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  getCurrentUserRole() {\n    const user = this.getCurrentUser();\n    return user ? user.role : null;\n  }\n  getAuthToken() {\n    return localStorage.getItem('token');\n  }\n  forgotPassword(email) {\n    return this.http.post(`${this.apiUrl}/forgot-password`, {\n      email\n    });\n  }\n  resetPassword(token, password) {\n    return this.http.put(`${this.apiUrl}/reset-password/${token}`, {\n      password\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","catchError","AuthService","constructor","http","router","apiUrl","currentUserSubject","currentUser$","asObservable","loadUserFromStorage","userData","localStorage","getItem","next","JSON","parse","register","post","pipe","response","success","handleAuthentication","login","credentials","error","message","logout","removeItem","navigate","setItem","token","stringify","user","isAuthenticated","getCurrentUser","value","getCurrentUserRole","role","getAuthToken","forgotPassword","email","resetPassword","password","put","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\OneDrive\\Desktop\\finalminitrack\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap, catchError } from 'rxjs';\nimport { User } from '../models/user.model';\nimport { Router } from '@angular/router';\n\ninterface AuthResponse {\n  success: boolean;\n  token: string;\n  user: User;\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:5000/api/auth';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient, private router: Router) {\n    this.loadUserFromStorage();\n  }\n\n  private loadUserFromStorage(): void {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      this.currentUserSubject.next(JSON.parse(userData));\n    }\n  }\n\n  register(userData: any): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, userData)\n      .pipe(\n        tap(response => {\n          if (response.success) {\n            this.handleAuthentication(response);\n          }\n        })\n      );\n  }\n\n  login(credentials: { email: string; password: string }): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap(response => {\n          if (response.success) {\n            this.handleAuthentication(response);\n          }\n        }),\n        catchError(error => {\n          throw error.error || { message: 'Login failed' };\n        })\n      );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  private handleAuthentication(response: AuthResponse): void {\n    localStorage.setItem('token', response.token);\n    localStorage.setItem('user', JSON.stringify(response.user));\n    this.currentUserSubject.next(response.user);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  getCurrentUserRole(): string | null {\n    const user = this.getCurrentUser();\n    return user ? user.role : null;\n  }\n\n  getAuthToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  forgotPassword(email: string): Observable<any> {\n    return this.http.post<any>(`${this.apiUrl}/forgot-password`, { email });\n  }\n\n  resetPassword(token: string, password: string): Observable<any> {\n    return this.http.put<any>(`${this.apiUrl}/reset-password/${token}`, { password });\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, timeout, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ActivityService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:5000/api/activities';\n  }\n  submitActivity(activityData) {\n    // Get the token from localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    // Set up headers with authentication but WITHOUT content-type\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    console.log('Submitting activity with URL:', this.apiUrl);\n    console.log('Headers:', headers);\n    console.log('FormData contents:');\n    activityData.forEach((value, key) => {\n      console.log(key, ':', value);\n    });\n    // Return the POST request without observe: 'events' for simpler handling\n    return this.http.post(this.apiUrl, activityData, {\n      headers,\n      reportProgress: true\n    }).pipe(timeout(60000),\n    // 60 second timeout for file uploads\n    retry(1),\n    // Retry failed requests once\n    catchError(this.handleError));\n  }\n  getMyActivities() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(this.apiUrl, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getPendingActivities() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/pending`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  reviewActivity(id, reviewData) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.put(`${this.apiUrl}/${id}/review`, reviewData, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  getAllActivities() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(`${this.apiUrl}/all`, {\n      headers\n    }).pipe(catchError(this.handleError));\n  }\n  generateReport(params = {}) {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    const queryParams = new URLSearchParams();\n    if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n    if (params.studentIds) queryParams.append('studentIds', params.studentIds);\n    if (params.department) queryParams.append('department', params.department);\n    if (params.class) queryParams.append('class', params.class);\n    if (params.semester) queryParams.append('semester', params.semester);\n    if (params.status) queryParams.append('status', params.status);\n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get(url, {\n      headers\n    });\n  }\n  handleError(error) {\n    console.error('API Error:', error);\n    let errorMessage = 'An unknown error occurred';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else if (error.status === 0) {\n        errorMessage = 'Unable to connect to the server. Please check your internet connection.';\n      } else if (error.status === 401) {\n        errorMessage = 'Unauthorized. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else {\n        errorMessage = `Error Code: ${error.status}, Message: ${error.message}`;\n      }\n    }\n    console.error('Formatted error message:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n  static {\n    this.ɵfac = function ActivityService_Factory(t) {\n      return new (t || ActivityService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ActivityService,\n      factory: ActivityService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","throwError","catchError","timeout","retry","ActivityService","constructor","http","apiUrl","submitActivity","activityData","token","localStorage","getItem","Error","headers","console","log","forEach","value","key","post","reportProgress","pipe","handleError","getMyActivities","get","getPendingActivities","reviewActivity","id","reviewData","put","getAllActivities","generateReport","params","queryParams","URLSearchParams","teacherId","append","studentIds","department","class","semester","status","url","toString","error","errorMessage","ErrorEvent","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\user\\ActivityPoints-Tracker-\\frontend\\src\\app\\core\\services\\activity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpEvent, HttpEventType } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, timeout, retry, map } from 'rxjs/operators';\nimport { Activity } from '../models/activity.model';\nimport { ApiResponse } from '../models/api-response.model';\nimport { environment } from '../../../environments/environment';\n\n// Define the API response interfaces\ninterface PendingActivitiesResponse {\n  success: boolean;\n  count: number;\n  stats: {\n    pending: number;\n    approved: number;\n    rejected: number;\n  };\n  data: Activity[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ActivityService {\n  private apiUrl = 'http://localhost:5000/api/activities';\n\n  constructor(private http: HttpClient) { }\n\n  submitActivity(activityData: FormData): Observable<ApiResponse<Activity>> {\n    // Get the token from localStorage\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    // Set up headers with authentication but WITHOUT content-type\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    console.log('Submitting activity with URL:', this.apiUrl);\n    console.log('Headers:', headers);\n    console.log('FormData contents:');\n    activityData.forEach((value, key) => {\n      console.log(key, ':', value);\n    });\n\n    // Return the POST request without observe: 'events' for simpler handling\n    return this.http.post<ApiResponse<Activity>>(this.apiUrl, activityData, { \n      headers,\n      reportProgress: true\n    }).pipe(\n      timeout(60000), // 60 second timeout for file uploads\n      retry(1), // Retry failed requests once\n      catchError(this.handleError)\n    );\n  }\n\n  getMyActivities(): Observable<ApiResponse<Activity[]>> {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get<ApiResponse<Activity[]>>(this.apiUrl, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getPendingActivities(): Observable<PendingActivitiesResponse> {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get<PendingActivitiesResponse>(`${this.apiUrl}/pending`, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  reviewActivity(id: string, reviewData: { status: 'approved' | 'rejected', feedback?: string, pointsAwarded?: number }): Observable<ApiResponse<Activity>> {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.put<ApiResponse<Activity>>(`${this.apiUrl}/${id}/review`, reviewData, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  getAllActivities(): Observable<ApiResponse<Activity[]>> {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get<ApiResponse<Activity[]>>(`${this.apiUrl}/all`, { headers })\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  generateReport(params: { \n    teacherId?: string;\n    studentIds?: string;\n    department?: string; \n    class?: string;\n    semester?: string; \n    status?: string \n  } = {}): Observable<any> {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return throwError(() => new Error('Authentication token not found'));\n    }\n\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    const queryParams = new URLSearchParams();\n    \n    if (params.teacherId) queryParams.append('teacherId', params.teacherId);\n    if (params.studentIds) queryParams.append('studentIds', params.studentIds);\n    if (params.department) queryParams.append('department', params.department);\n    if (params.class) queryParams.append('class', params.class);\n    if (params.semester) queryParams.append('semester', params.semester);\n    if (params.status) queryParams.append('status', params.status);\n    \n    const url = `${this.apiUrl}/report?${queryParams.toString()}`;\n    return this.http.get<any>(url, { headers });\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    console.error('API Error:', error);\n    let errorMessage = 'An unknown error occurred';\n    \n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      if (error.error && error.error.message) {\n        errorMessage = error.error.message;\n      } else if (error.status === 0) {\n        errorMessage = 'Unable to connect to the server. Please check your internet connection.';\n      } else if (error.status === 401) {\n        errorMessage = 'Unauthorized. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'You do not have permission to perform this action.';\n      } else {\n        errorMessage = `Error Code: ${error.status}, Message: ${error.message}`;\n      }\n    }\n    \n    console.error('Formatted error message:', errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}